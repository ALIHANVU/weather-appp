import { formatTime, getDayOfWeek, getUvIndexDescription, formatWindSpeed, formatVisibility, formatTemperature, getWeatherEmoji, formatLastUpdateTime } from './utils.js';
import { getState } from './state.js';
import { UNITS } from './constants.js';

// --- DOM –≠–ª–µ–º–µ–Ω—Ç—ã ---
export const elements = {
    // –ü–æ–∏—Å–∫
    citySearch: document.querySelector('#citySearch'),
    searchButton: document.querySelector('#searchButton'),
    // –†–µ–∑—É–ª—å—Ç–∞—Ç
    weatherResult: document.querySelector('#weatherResult'),
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    settingsButton: document.querySelector('#settingsButton'),
    settingsPanel: document.querySelector('#settingsPanel'),
    unitsToggleC: document.querySelector('#unitsToggleC'),
    unitsToggleF: document.querySelector('#unitsToggleF'),
    timeFormat12: document.querySelector('#timeFormat12'),
    timeFormat24: document.querySelector('#timeFormat24'),
    // –û—Å–Ω–æ–≤–Ω–æ–µ
    cityName: document.querySelector('#cityName'),
    temperature: document.querySelector('#temperature'),
    weatherDescription: document.querySelector('#weatherDescription'),
    maxTemp: document.querySelector('#maxTemp'),
    minTemp: document.querySelector('#minTemp'),
    lastUpdated: document.querySelector('#lastUpdated'),
    // –î–µ—Ç–∞–ª–∏
    feelsLike: document.querySelector('#feelsLike'),
    humidity: document.querySelector('#humidity'),
    windSpeed: document.querySelector('#windSpeed'),
    visibility: document.querySelector('#visibility'),
    uvIndex: document.querySelector('#uvIndex'),
    precipitationProb: document.querySelector('#precipitationProb'),
    sunriseTime: document.querySelector('#sunriseTime'),
    sunsetTime: document.querySelector('#sunsetTime'),
    // –ü—Ä–æ–≥–Ω–æ–∑—ã
    hourlyForecastContainer: document.querySelector('#hourlyForecastContainer'),
    weeklyForecastContainer: document.querySelector('#weeklyForecastContainer'),
    // –°–æ–≤–µ—Ç—ã
    tipsContainer: document.querySelector('#tipsContainer'),
};

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI ---

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
function updateElementText(element, text) {
    if (!element) return;
    const newText = text ?? '-';
    if (element.textContent !== newText) {
        element.textContent = newText;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
export function updateCurrentWeatherUI(currentWeather, dailyForecast, timezoneOffset) {
    if (!currentWeather || !dailyForecast || !dailyForecast[0]) {
        console.warn("[UI] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã");
        // –ú–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return;
    }
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–∫—É—â–∏–µ
    updateElementText(elements.temperature, formatTemperature(currentWeather.temp));
    updateElementText(elements.weatherDescription, currentWeather.weather[0]?.description?.replace(/^\w/, c => c.toUpperCase()));
    // –ú–∏–Ω/–ú–∞–∫—Å –∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    updateElementText(elements.maxTemp, formatTemperature(dailyForecast[0].temp?.max));
    updateElementText(elements.minTemp, formatTemperature(dailyForecast[0].temp?.min));
    // –î–µ—Ç–∞–ª–∏
    updateElementText(elements.feelsLike, formatTemperature(currentWeather.feels_like));
    updateElementText(elements.humidity, `${Math.round(currentWeather.humidity)}%`);
    updateElementText(elements.windSpeed, formatWindSpeed(currentWeather.wind_speed));
    updateElementText(elements.visibility, formatVisibility(currentWeather.visibility));
    updateElementText(elements.uvIndex, getUvIndexDescription(currentWeather.uvi));
    updateElementText(elements.sunriseTime, formatTime(currentWeather.sunrise + timezoneOffset));
    updateElementText(elements.sunsetTime, formatTime(currentWeather.sunset + timezoneOffset));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≥–æ—Ä–æ–¥–∞
export function updateCityNameUI(name) {
     updateElementText(elements.cityName, name);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
export function updateLastUpdatedUI(timestamp) {
     updateElementText(elements.lastUpdated, formatLastUpdateTime(timestamp));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
export function updateHourlyForecastUI(hourlyForecast, timezoneOffset) {
    if (!elements.hourlyForecastContainer) return;
    elements.hourlyForecastContainer.innerHTML = '';

    if (!hourlyForecast || hourlyForecast.length === 0) {
        elements.hourlyForecastContainer.innerHTML = '<div class="forecast-hour"><span class="forecast-time">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span></div>';
        updateElementText(elements.precipitationProb, '-'); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º POP
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º POP –≤ –¥–µ—Ç–∞–ª—è—Ö
    const firstPop = hourlyForecast[0]?.pop;
    updateElementText(elements.precipitationProb, firstPop !== undefined ? `${Math.round(firstPop * 100)}%` : '-');

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    hourlyForecast.slice(0, 24).forEach((item, index) => {
        const isNow = index === 0;
        const pop = item.pop !== undefined ? `${Math.round(item.pop * 100)}%` : null;
        const hourDiv = document.createElement('div');
        hourDiv.className = 'forecast-hour';
        hourDiv.innerHTML = `
            <div class="forecast-time">${isNow ? '–°–µ–π—á–∞—Å' : formatTime(item.dt + timezoneOffset)}</div>
            <div class="forecast-icon">${getWeatherEmoji(item.weather[0]?.icon)}</div>
            ${pop ? `<div class="forecast-pop">${pop}</div>` : ''}
            <div class="forecast-temp">${formatTemperature(item.temp)}</div>
        `;
        addRippleEffect(hourDiv);
        elements.hourlyForecastContainer.appendChild(hourDiv);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
export function updateWeeklyForecastUI(dailyForecast, timezoneOffset) {
     if (!elements.weeklyForecastContainer) return;
    elements.weeklyForecastContainer.innerHTML = '';

    if (!dailyForecast || dailyForecast.length === 0) {
        elements.weeklyForecastContainer.innerHTML = '<div class="weekly-day"><span class="weekly-day-name">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span></div>';
        return;
    }

    dailyForecast.slice(0, 7).forEach((day) => {
        const dayDiv = document.createElement('div');
        dayDiv.className = 'weekly-day';
        const icon = day.weather[0]?.icon;
        dayDiv.innerHTML = `
            <div class="weekly-day-name">${getDayOfWeek(day.dt + timezoneOffset)}</div>
            <div class="weekly-day-icon">${getWeatherEmoji(icon)}</div>
            <div class="weekly-day-temp">
                <span class="temp-max">${formatTemperature(day.temp?.max)}</span>
                <span class="temp-min">${formatTemperature(day.temp?.min)}</span>
            </div>
        `;
        addRippleEffect(dayDiv);
        elements.weeklyForecastContainer.appendChild(dayDiv);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤
export function updateFarmerTipsUI(tips) {
    if (!elements.tipsContainer) return;
    elements.tipsContainer.innerHTML = '';

    const containerElement = elements.tipsContainer.closest('.farmer-tips'); // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ä—Ç–æ—á–∫—É

    if (!tips || tips.length === 0) {
         if (containerElement) containerElement.classList.add('hidden'); // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å—é –∫–∞—Ä—Ç–æ—á–∫—É
         return;
    }

     if (containerElement) containerElement.classList.remove('hidden'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É

    tips.forEach((tipText) => {
        const tipDiv = document.createElement('div');
        tipDiv.className = 'tip-item';
        tipDiv.innerHTML = `
            <span class="tip-icon">üå±</span>
            <span class="tip-text">${tipText}</span>
        `;
        addRippleEffect(tipDiv);
        elements.tipsContainer.appendChild(tipDiv);
    });
}

// --- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –û—à–∏–±–∫–∏ ---

let loadingOverlay = null;
export function showLoading(message = "–ó–∞–≥—Ä—É–∑–∫–∞...") {
    if (loadingOverlay) return; // –£–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è

    loadingOverlay = document.createElement('div');
    loadingOverlay.className = 'loading-overlay';
    loadingOverlay.setAttribute('aria-hidden', 'true');
    loadingOverlay.style.opacity = '0';
    loadingOverlay.innerHTML = `
        <div class="loading-spinner" aria-label="${message}" role="status">
            <div class="loading-text">${message}</div>
        </div>
    `;
    document.body.appendChild(loadingOverlay);
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    requestAnimationFrame(() => {
         loadingOverlay.style.opacity = '1';
         loadingOverlay.style.pointerEvents = 'auto';
    });
}

export function hideLoading() {
    if (!loadingOverlay) return;

    loadingOverlay.style.opacity = '0';
    loadingOverlay.style.pointerEvents = 'none';
    // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    loadingOverlay.addEventListener('transitionend', () => {
        loadingOverlay?.remove(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ
        if (loadingOverlay === event?.target) loadingOverlay = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç —Å–∞–º—ã–π —ç–ª–µ–º–µ–Ω—Ç
    }, { once: true });
    // Fallback –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ transitionend –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
    setTimeout(() => {
        loadingOverlay?.remove();
        loadingOverlay = null;
    }, 350); // –ß—É—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ transition
}


let errorTimeout;
let currentErrorDiv = null;
export function showError(message) {
    if (!message) return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –æ—à–∏–±–∫–∏
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –µ—Å—Ç—å
    if (currentErrorDiv) {
        currentErrorDiv.remove();
        currentErrorDiv = null;
    }
    clearTimeout(errorTimeout);

    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-notification';
    errorDiv.textContent = message;
    errorDiv.setAttribute('role', 'alert');
    document.body.appendChild(errorDiv);
    currentErrorDiv = errorDiv;

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π reflow –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    void errorDiv.offsetWidth;
    errorDiv.style.animationPlayState = 'running'; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞

    // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
    errorTimeout = setTimeout(() => {
         if (errorDiv) {
            errorDiv.classList.add('fade-out'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è CSS-–∞–Ω–∏–º–∞—Ü–∏–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
            errorDiv.addEventListener('animationend', () => errorDiv.remove(), { once: true });
            // Fallback –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ animationend –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
            setTimeout(() => errorDiv?.remove(), 350);
         }
        if (currentErrorDiv === errorDiv) {
             currentErrorDiv = null;
         }
    }, 4000);
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ UI –§—É–Ω–∫—Ü–∏–∏ ---

// –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ ripple
function createRipple(event) {
    const target = event.currentTarget;
    if (target.disabled || target.querySelector('.ripple')) return;

    const ripple = document.createElement('span');
    const diameter = Math.max(target.clientWidth, target.clientHeight);
    const radius = diameter / 2;
    const rect = target.getBoundingClientRect();

    ripple.style.width = ripple.style.height = `${diameter}px`;
    ripple.style.left = `${event.clientX - rect.left - radius}px`;
    ripple.style.top = `${event.clientY - rect.top - radius}px`;
    ripple.classList.add('ripple');

    target.appendChild(ripple);
    ripple.addEventListener('animationend', () => ripple.remove(), { once: true });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ ripple –∫ —ç–ª–µ–º–µ–Ω—Ç—É
export function addRippleEffect(element) {
    if (!element || element.dataset.rippleAdded) return;
    element.addEventListener('click', createRipple);
    const currentPosition = window.getComputedStyle(element).position;
    if (currentPosition === 'static') {
        element.style.position = 'relative';
    }
    element.style.overflow = 'hidden'; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ overflow hidden
    element.dataset.rippleAdded = 'true';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ripple –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
export function initRippleEffects() {
    const rippleSelectors = '.search-button, .settings-toggle-button, .toggle-button';
    // –î–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ripple –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏–∏
    document.querySelectorAll(rippleSelectors).forEach(addRippleEffect);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
export function updateSettingsUI() {
    try { // –î–æ–±–∞–≤–ª—è–µ–º try-catch –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const { units, timeFormat } = getState();
        elements.unitsToggleC?.classList.toggle('active', units === UNITS.METRIC);
        elements.unitsToggleF?.classList.toggle('active', units === UNITS.IMPERIAL);
        elements.timeFormat24?.classList.toggle('active', timeFormat === TIME_FORMAT.H24);
        elements.timeFormat12?.classList.toggle('active', timeFormat === TIME_FORMAT.H12);
    } catch (e) {
        console.error("[UI] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –Ω–∞—Å—Ç—Ä–æ–µ–∫:", e)
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
export function toggleSettingsPanel() {
     if (!elements.settingsPanel || !elements.settingsButton) return;
     const isHidden = elements.settingsPanel.classList.toggle('hidden');
     elements.settingsPanel.setAttribute('aria-hidden', isHidden);
     elements.settingsButton.setAttribute('aria-expanded', !isHidden);
     // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ (–¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
     if (!isHidden) {
         elements.settingsPanel.querySelector('button')?.focus();
     }
}

// –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
export function showWeatherResults() {
    elements.weatherResult?.classList.remove('hidden');
}
export function hideWeatherResults() {
     elements.weatherResult?.classList.add('hidden');
}
