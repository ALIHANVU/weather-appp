import { formatTime, getDayOfWeek, getUvIndexDescription, formatWindSpeed, formatVisibility, formatTemperature, getWeatherEmoji, formatLastUpdateTime } from './utils.js';
import { getState } from './state.js';
import { UNITS } from './constants.js';

// --- DOM –≠–ª–µ–º–µ–Ω—Ç—ã ---
// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export const elements = {
    // –ü–æ–∏—Å–∫
    citySearch: document.querySelector('#citySearch'),
    searchButton: document.querySelector('#searchButton'),
    // –†–µ–∑—É–ª—å—Ç–∞—Ç
    weatherResult: document.querySelector('#weatherResult'),
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    settingsButton: document.querySelector('#settingsButton'),
    settingsPanel: document.querySelector('#settingsPanel'),
    unitsToggleC: document.querySelector('#unitsToggleC'),
    unitsToggleF: document.querySelector('#unitsToggleF'),
    timeFormat12: document.querySelector('#timeFormat12'),
    timeFormat24: document.querySelector('#timeFormat24'),
    // –û—Å–Ω–æ–≤–Ω–æ–µ
    cityName: document.querySelector('#cityName'),
    temperature: document.querySelector('#temperature'),
    weatherDescription: document.querySelector('#weatherDescription'),
    maxTemp: document.querySelector('#maxTemp'),
    minTemp: document.querySelector('#minTemp'),
    lastUpdated: document.querySelector('#lastUpdated'),
    // –î–µ—Ç–∞–ª–∏
    feelsLike: document.querySelector('#feelsLike'),
    humidity: document.querySelector('#humidity'),
    windSpeed: document.querySelector('#windSpeed'),
    visibility: document.querySelector('#visibility'),
    uvIndex: document.querySelector('#uvIndex'),
    precipitationProb: document.querySelector('#precipitationProb'), // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ—á–∞—Å–æ–≤–æ–≥–æ POP
    sunriseTime: document.querySelector('#sunriseTime'),
    sunsetTime: document.querySelector('#sunsetTime'),
    // –ü—Ä–æ–≥–Ω–æ–∑—ã
    hourlyForecastContainer: document.querySelector('#hourlyForecastContainer'),
    weeklyForecastContainer: document.querySelector('#weeklyForecastContainer'),
    // –°–æ–≤–µ—Ç—ã
    tipsContainer: document.querySelector('#tipsContainer'),
};

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI ---

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
function updateElementText(element, text) {
    if (!element) {
        // console.warn("UI Element not found for update");
        return;
    }
    const currentText = element.textContent;
    const newText = text ?? '-'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ?? –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (currentText !== newText) {
        element.classList.add('data-updating'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ —Å–º–µ–Ω–æ–π —Ç–µ–∫—Å—Ç–∞
        requestAnimationFrame(() => {
            setTimeout(() => { // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
                element.textContent = newText;
                element.classList.remove('data-updating'); // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å, —á—Ç–æ–±—ã —ç–ª–µ–º–µ–Ω—Ç –ø–ª–∞–≤–Ω–æ –ø–æ—è–≤–∏–ª—Å—è
            }, 50); // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        });
    }
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
export function updateCurrentWeatherUI(currentWeather, dailyForecast, timezoneOffset) {
    if (!currentWeather || !dailyForecast || !dailyForecast[0]) {
        console.warn("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã UI");
        return;
    }

    updateElementText(elements.temperature, formatTemperature(currentWeather.temp));
    updateElementText(elements.weatherDescription, currentWeather.weather[0]?.description?.replace(/^\w/, c => c.toUpperCase()) || '-');
    updateElementText(elements.feelsLike, formatTemperature(currentWeather.feels_like));
    updateElementText(elements.humidity, `${Math.round(currentWeather.humidity)}%`);
    updateElementText(elements.windSpeed, formatWindSpeed(currentWeather.wind_speed));
    updateElementText(elements.visibility, formatVisibility(currentWeather.visibility));
    updateElementText(elements.uvIndex, getUvIndexDescription(currentWeather.uvi));
    updateElementText(elements.sunriseTime, formatTime(currentWeather.sunrise + timezoneOffset));
    updateElementText(elements.sunsetTime, formatTime(currentWeather.sunset + timezoneOffset));

    // –ú–∏–Ω/–ú–∞–∫—Å –±–µ—Ä–µ–º –∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –°–ï–ì–û–î–ù–Ø (daily[0])
    updateElementText(elements.maxTemp, formatTemperature(dailyForecast[0].temp.max));
    updateElementText(elements.minTemp, formatTemperature(dailyForecast[0].temp.min));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≥–æ—Ä–æ–¥–∞
export function updateCityNameUI(name) {
     updateElementText(elements.cityName, name || '-');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
export function updateLastUpdatedUI(timestamp) {
     updateElementText(elements.lastUpdated, formatLastUpdateTime(timestamp));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
export function updateHourlyForecastUI(hourlyForecast, timezoneOffset) {
    if (!elements.hourlyForecastContainer) return;
    elements.hourlyForecastContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

    if (!hourlyForecast || hourlyForecast.length === 0) {
        elements.hourlyForecastContainer.textContent = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'; // –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ –≤ –¥–µ—Ç–∞–ª—è—Ö (–±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —á–∞—Å–∞)
    const firstPop = hourlyForecast[0]?.pop;
    updateElementText(elements.precipitationProb, firstPop !== undefined ? `${Math.round(firstPop * 100)}%` : '-');

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
    hourlyForecast.slice(0, 24).forEach((item, index) => {
        const isNow = index === 0;
        const pop = item.pop !== undefined ? `${Math.round(item.pop * 100)}%` : null; // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤

        const hourDiv = document.createElement('div');
        hourDiv.className = 'forecast-hour';

        hourDiv.innerHTML = `
            <div class="forecast-time">${isNow ? '–°–µ–π—á–∞—Å' : formatTime(item.dt + timezoneOffset)}</div>
            <div class="forecast-icon">${getWeatherEmoji(item.weather[0]?.icon)}</div>
            ${pop ? `<div class="forecast-pop">${pop}</div>` : ''}
            <div class="forecast-temp">${formatTemperature(item.temp)}</div>
        `;
        addRippleEffect(hourDiv); // –î–æ–±–∞–≤–ª—è–µ–º ripple —ç—Ñ—Ñ–µ–∫—Ç
        elements.hourlyForecastContainer.appendChild(hourDiv);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
export function updateWeeklyForecastUI(dailyForecast, timezoneOffset) {
     if (!elements.weeklyForecastContainer) return;
    elements.weeklyForecastContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º

    if (!dailyForecast || dailyForecast.length === 0) {
        elements.weeklyForecastContainer.textContent = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
        return;
    }

    dailyForecast.slice(0, 7).forEach((day) => { // –ë–µ—Ä–µ–º 7 –¥–Ω–µ–π
        const dayDiv = document.createElement('div');
        dayDiv.className = 'weekly-day';

        const icon = day.weather[0]?.icon; // –ë–µ—Ä–µ–º –∏–∫–æ–Ω–∫—É –¥–Ω—è

        dayDiv.innerHTML = `
            <div class="weekly-day-name">${getDayOfWeek(day.dt + timezoneOffset)}</div>
            <div class="weekly-day-icon">${getWeatherEmoji(icon)}</div>
            <div class="weekly-day-temp">
                <span class="temp-max">${formatTemperature(day.temp.max)}</span>
                <span class="temp-min">${formatTemperature(day.temp.min)}</span>
            </div>
        `;
        addRippleEffect(dayDiv); // –î–æ–±–∞–≤–ª—è–µ–º ripple —ç—Ñ—Ñ–µ–∫—Ç
        elements.weeklyForecastContainer.appendChild(dayDiv);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤
export function updateFarmerTipsUI(tips) {
    if (!elements.tipsContainer) return;
    elements.tipsContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º

    if (!tips || tips.length === 0) {
         // –ú–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å –±–ª–æ–∫ –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
         elements.tipsContainer.innerHTML = '<div class="tip-item"><span class="tip-text">–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–æ–≤–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</span></div>';
         return;
    }
    tips.forEach((tipText) => {
        const tipDiv = document.createElement('div');
        tipDiv.className = 'tip-item';

        tipDiv.innerHTML = `
            <span class="tip-icon">üå±</span>
            <span class="tip-text">${tipText}</span>
        `;
        addRippleEffect(tipDiv); // –î–æ–±–∞–≤–ª—è–µ–º ripple —ç—Ñ—Ñ–µ–∫—Ç
        elements.tipsContainer.appendChild(tipDiv);
    });
}

// --- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –û—à–∏–±–∫–∏ ---

let loadingOverlay = null;
export function showLoading(message = "–ó–∞–≥—Ä—É–∑–∫–∞...") {
    if (loadingOverlay) hideLoading(); // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π, –µ—Å–ª–∏ –µ—Å—Ç—å

    loadingOverlay = document.createElement('div');
    loadingOverlay.className = 'loading-overlay';
    // –î–µ–ª–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –Ω–µ—Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–º
    loadingOverlay.setAttribute('aria-hidden', 'true');
    loadingOverlay.style.opacity = '0'; // Start transparent for fade-in
    loadingOverlay.innerHTML = `
        <div class="loading-spinner" aria-label="${message}" role="status">
            <div class="loading-text">${message}</div>
        </div>
    `;
    document.body.appendChild(loadingOverlay);
    // Force reflow before adding fade-in class
    void loadingOverlay.offsetWidth;
    loadingOverlay.style.opacity = '1';
}

export function hideLoading() {
    if (loadingOverlay) {
        loadingOverlay.style.opacity = '0';
        // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        loadingOverlay.addEventListener('transitionend', () => {
            if (loadingOverlay) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –æ–Ω —É–¥–∞–ª–µ–Ω –¥—Ä—É–≥–∏–º –≤—ã–∑–æ–≤–æ–º
                 loadingOverlay.remove();
                 loadingOverlay = null;
            }
        }, { once: true });
        // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ transitionend –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, display:none)
         setTimeout(() => {
             if (loadingOverlay) {
                 loadingOverlay.remove();
                 loadingOverlay = null;
             }
         }, 350); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ transition
    }
}

let errorTimeout;
let currentErrorDiv = null;
export function showError(message) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    if (currentErrorDiv) {
         currentErrorDiv.remove();
         currentErrorDiv = null;
     }
    clearTimeout(errorTimeout);

    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-notification';
    errorDiv.textContent = message;
    errorDiv.setAttribute('role', 'alert'); // For accessibility
    document.body.appendChild(errorDiv);
    currentErrorDiv = errorDiv;

    // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ
    errorTimeout = setTimeout(() => {
        // –ü–ª–∞–≤–Ω–æ —É–±–∏—Ä–∞–µ–º
         if (errorDiv) {
            errorDiv.style.opacity = '0';
             errorDiv.addEventListener('transitionend', () => errorDiv.remove(), { once: true });
             // Fallback timer
             setTimeout(() => errorDiv?.remove(), 350); // Ensure removal
         }
        if (currentErrorDiv === errorDiv) {
             currentErrorDiv = null;
         }
    }, 4000); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 4 —Å–µ–∫—É–Ω–¥—ã
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ UI –§—É–Ω–∫—Ü–∏–∏ ---

// –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ ripple
function createRipple(event) {
    const target = event.currentTarget;
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ ripple, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ —É–∂–µ –µ—Å—Ç—å ripple
    if (target.disabled || target.querySelector('.ripple')) return;

    const ripple = document.createElement('span');
    const diameter = Math.max(target.clientWidth, target.clientHeight);
    const radius = diameter / 2;
    const rect = target.getBoundingClientRect();

    ripple.style.width = ripple.style.height = `${diameter}px`;
    ripple.style.left = `${event.clientX - rect.left - radius}px`;
    ripple.style.top = `${event.clientY - rect.top - radius}px`;
    ripple.classList.add('ripple');

    // –î–æ–±–∞–≤–ª—è–µ–º ripple –∏ –∂–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    target.appendChild(ripple);
    ripple.addEventListener('animationend', () => ripple.remove(), { once: true });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ ripple –∫ —ç–ª–µ–º–µ–Ω—Ç—É
export function addRippleEffect(element) {
    if (!element || element.dataset.rippleAdded) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ
    element.addEventListener('click', createRipple);
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç–∏–ª–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç ripple —Ä–∞–±–æ—Ç–∞—Ç—å (–Ω—É–∂–Ω–æ –¥–ª—è position:absolute)
    const currentPosition = window.getComputedStyle(element).position;
    if (currentPosition === 'static') {
        element.style.position = 'relative';
    }
    // overflow: hidden –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ CSS –¥–ª—è —ç—Ç–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    element.dataset.rippleAdded = 'true'; // –ü–æ–º–µ—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ripple –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
export function initRippleEffects() {
    const rippleElements = document.querySelectorAll(
        '.search-button, .settings-toggle-button, .toggle-button, .detail-item, .tip-item, .weekly-day, .forecast-hour'
    );
    rippleElements.forEach(addRippleEffect);
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç ripple –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤ update...UI —Ñ—É–Ω–∫—Ü–∏—è—Ö
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
export function updateSettingsUI() {
    const { units, timeFormat } = getState();

    elements.unitsToggleC?.classList.toggle('active', units === UNITS.METRIC);
    elements.unitsToggleF?.classList.toggle('active', units === UNITS.IMPERIAL);
    elements.timeFormat24?.classList.toggle('active', timeFormat === TIME_FORMAT.H24);
    elements.timeFormat12?.classList.toggle('active', timeFormat === TIME_FORMAT.H12);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
export function toggleSettingsPanel() {
     elements.settingsPanel?.classList.toggle('hidden');
     const isHidden = elements.settingsPanel?.classList.contains('hidden');
      // –£–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –¥–ª—è —Å–∫—Ä–∏–Ω—Ä–∏–¥–µ—Ä–æ–≤
     elements.settingsPanel?.setAttribute('aria-hidden', isHidden);
     elements.settingsButton?.setAttribute('aria-expanded', !isHidden);
}

// –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
export function showWeatherResults() {
    elements.weatherResult?.classList.remove('hidden');
     // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
     // requestAnimationFrame(() => {
     //     elements.weatherResult?.classList.add('results-visible');
     // });
}
export function hideWeatherResults() {
     elements.weatherResult?.classList.add('hidden');
     // elements.weatherResult?.classList.remove('results-visible');
}